#
# FRONT END
#
Run = Lauf
Clear = Klar
Help = Hilfe
Language = Sprache
BackgroundColor = Hintergrundfarbe
PenColor = Stiftfarbe
TurtleIcon = Schildkrte-Symbol
Variables = Variablen
Methods = Methoden
CommandHistory = Befehlsverlauf
HelpHeader = Hilfe-Men

Forward = vorw?rts
Backward = r?ckw?rts
Left = links
Right = recht
ClearScreen = waschenschirm

PenDown = stiftunten
PenUp = stiftoben
SetPenColor = stellenstiftfarbe
SetPenSize = stellenstiftgr??e
SetBackground = stellenhintergrund
SetShape = stellenform

HelpInfo = These are the commands available to you: \n\
  FORWARD pixels or FD pixels: moves turtle forward in its current heading by pixels distance returns the value of pixels\n\
  BACK pixels or BK pixels: moves turtle backward in its current heading by pixels distance returns the value of pixels\n\
LEFT degrees or LT degrees: turns turtle counterclockwise by degrees angle returns the value of degrees\n\
RIGHT degrees or RT degrees: turns turtle clockwise by degrees angle returns the value of degrees\n\
SETHEADING degrees or SETH degrees: turns turtle to an absolute heading returns number of degrees moved \n\
TOWARDS x y: turns turtle to face the point (x, y), where (0, 0) is the center of the screen returns the number of degrees turtle turned \n\
SETXY x y or GOTO x y: moves turtle to an absolute screen position, where (0, 0) is the center of the screen returns the distance turtle moved\n\
PENDOWN or PD: puts pen down such that when the turtle moves, it leaves a trail returns 1 \n\
PENUP or PU: puts pen up such that when the turtle moves, it does not leave a trail returns 0\n\
SHOWTURTLE or ST: makes turtle visible returns 1\n\
HIDETURTLE or HT: makes turtle invisible returns 0\n\
HOME: moves turtle to the center of the screen (0 0) returns the distance turtle moved\n\
CLEARSCREEN or CS: erases turtle's trails and sends it to the home position returns the distance turtle moved\n\
XCOR: returns the turtle's X coordinate from the center of the screen\n\
YCOR: returns the turtle's Y coordinate from the center of the screen\n\
HEADING: returns the turtle's heading in degrees\n\
PENDOWN or PENDOWNP: returns 1 if turtle's pen is down, 0 if it is up\n\
SHOWING SHOWINGP: returns 1 \n\
SUM expr1 expr2 or + expr1 expr: returns sum of the values of expr1 and expr2\n\
DIFFERENCE expr1 expr2 or - expr1 expr2: returns difference of the values of expr1 and expr2\n\
PRODUCT expr1 expr2 or * expr1 expr2: returns product of the values of expr1 and expr2\n\
QUOTIENT expr1 expr2 or / expr1 expr2: returns quotient of the values of expr1 and expr2\n\
REMAINDER expr1 expr2 or % expr1 expr2: returns remainder on dividing the values of expr1 by expr2\n\
MINUS expr or ~ expr: returns negative of the values of expr\n\
RANDOM max: returns random non-negative number strictly less than max\n\
SIN degrees: returns sine of degrees\n\
COS degrees: return cosine of degrees\n\
TAN degrees: returns tangent of degrees\n\
ATAN degrees: returns arctangent of degrees\n\
LOG expr: returns natural log of expr\n\
POW base exponent: returns base raised to the power of the exponent\n\
PI: Reports the number Pi\n\
LESS? expr1 expr2 or LESSP expr1 expr2: returns 1 if the value of expr1 is strictly less than the value of expr2, otherwise 0 \n\
GREATER? expr1 expr2 or GREATERP expr1 expr2: returns 1 if the value of expr1 is strictly greater than the value of expr2, otherwise 0\n\
EQUAL? expr1 expr2 or EQUALP expr1 expr2: returns 1 if the value of expr1 and the value of expr2 are equal, otherwise 0\n\
NOTEQUAL? expr1 expr2 or NOTEQUALP expr1 expr2: returns 1 if the value of expr1 and the value of expr2 are not equal, otherwise 0\n\
AND test1 test2: returns 1 if test1 and test2 are non-zero, otherwise 0\n\
OR test1 test2: returns 1 if test1 or test2 are non-zero, otherwise 0\n\
NOT test: returns 1 if test is 0 and 0 if test is non-zero\n\
MAKE variable expr or SET variable expr: assigns the value of expr to variable, creating the variable if necessary, returns expr\n\
REPEAT expr [ command(s) ]: runs command(s) given in the list the value of expr number of times, returns the value of the final command executed (or 0 if no commands are executed) note, the value of the current iteration, starting at 1, is automatically assigned to the variable :repcount so that it can be accessed by the command(s)\n\
DOTIMES [ variable limit ][ command(s) ]: runs command(s) for each value specified in the range, i.e., from (1 - limit) inclusive, returns the value of the final command executed (or 0 if no commands are executed) note, variable is assigned to each succeeding value so that it can be accessed by the command(s)\n\
FOR [ variable start end increment ] [ command(s) ]: runs command(s) for each value specified in the range, i.e., from (start - end), going by increment, returns the value of the final command executed (or 0 if no commands are executed) note, variable is assigned to each succeeding value so that it can be accessed by the command(s)\n\
IF expr [ command(s) ]: if expr is not 0, runs the command(s) given in the list, returns the value of the final command executed (or 0 if no commands are executed\n\
IFELSE expr [ trueCommand(s) ][ falseCommand(s) ]: if expr is not 0, runs the trueCommands given in the first list, otherwise runs the falseCommands given in the second list, returns the value of the final command executed (or 0 if no commands are executed)\n\
TO commandName[ variable(s) ][ command(s) ]: assigns command(s) given in the second list to commandName using parameters given in first list as variables when commandName is used later in a program, the value of the final command executed is returned (or 0 if no commands are executed), returns 1 if command is successfully defined, otherwise 0\n\
SETBACKGROUND index or SETBG index: sets background color of screen to that represented by index, returns given index\n\
SETPENCOLOR index or SETPC index: sets color of the pen to that represented by index, returns given index\n\
SETPENSIZE pixels SETPS pixels: sets size of the pen to be pixels thickness, returns given pixels\n\
SETSHAPE index SETSH index: sets shape of turtle to that represented by index, returns given index\n\
SETPALETTE index r g b	sets color corresponding at given index to given r g b color values, returns given index\n\
PENCOLOR or PC: returns turtle's current color index\n\
SHAPE or SH: returns turtle's current shape index\n\
ID: returns current active turtle's ID number\n\
TURTLES: returns number of turtles created so far\n\
TELL [ turtle(s) ]: sets turtles that will follow commands hereafter, returns last value in turtles list\n\
ASK [ turtle(s) ][  command(s) ]: only the turtles given in first list all run commands given in the second list, returns result of last command run by the last turtle\n\
ASKWITH [ condition ][  command(s) ]: tell turtles matching given condition to run commands given in the second list, returns result of last command run\n